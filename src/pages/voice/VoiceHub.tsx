import React, { useState, useEffect } from 'react';\nimport { Plus, Mic, Settings, BarChart3, Smartphone, \n         Globe, Watch, Play, Pause, Edit, Trash2, Copy } from 'lucide-react';\nimport VoiceAgentBuilder from '../../components/voice/VoiceAgentBuilder';\nimport { VoiceAgentConfig } from '../../services/voice/VoiceService';\nimport { useAuth } from '../../contexts/userContext';\nimport { supabase } from '../../lib/supabase';\n\ninterface VoiceAgent {\n  id: string;\n  name: string;\n  description: string;\n  config: VoiceAgentConfig;\n  platforms: string[];\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface VoiceUsageStats {\n  totalSyntheses: number;\n  totalTranscriptions: number;\n  thisWeekUsage: number;\n  creditsUsed: number;\n}\n\nexport default function VoiceHub() {\n  const { user } = useAuth();\n  const [agents, setAgents] = useState<VoiceAgent[]>([]);\n  const [showBuilder, setShowBuilder] = useState(false);\n  const [editingAgent, setEditingAgent] = useState<VoiceAgent | null>(null);\n  const [usageStats, setUsageStats] = useState<VoiceUsageStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'agents' | 'analytics' | 'settings'>('agents');\n\n  useEffect(() => {\n    if (user) {\n      loadVoiceAgents();\n      loadUsageStats();\n    }\n  }, [user]);\n\n  const loadVoiceAgents = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('voice_agents')\n        .select('*')\n        .eq('user_id', user?.id)\n        .order('updated_at', { ascending: false });\n\n      if (error) throw error;\n      setAgents(data || []);\n    } catch (error) {\n      console.error('Error loading voice agents:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadUsageStats = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('voice_usage_logs')\n        .select('action, timestamp, cost_credits')\n        .eq('user_id', user?.id)\n        .gte('timestamp', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString());\n\n      if (error) throw error;\n\n      const stats = {\n        totalSyntheses: data?.filter(log => log.action === 'synthesize').length || 0,\n        totalTranscriptions: data?.filter(log => log.action === 'transcribe').length || 0,\n        thisWeekUsage: data?.filter(log => \n          new Date(log.timestamp) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n        ).length || 0,\n        creditsUsed: data?.reduce((sum, log) => sum + (log.cost_credits || 0), 0) || 0\n      };\n\n      setUsageStats(stats);\n    } catch (error) {\n      console.error('Error loading usage stats:', error);\n    }\n  };\n\n  const handleAgentCreated = async (config: VoiceAgentConfig) => {\n    try {\n      const agentData = {\n        user_id: user?.id,\n        name: config.name,\n        description: `${config.voiceProfile.style} voice agent`,\n        config: config,\n        platforms: Object.keys(config.integrations).filter(key => \n          config.integrations[key as keyof typeof config.integrations]\n        )\n      };\n\n      const { data, error } = await supabase\n        .from('voice_agents')\n        .insert([agentData])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      setAgents(prev => [data, ...prev]);\n      setShowBuilder(false);\n      setEditingAgent(null);\n    } catch (error) {\n      console.error('Error saving voice agent:', error);\n      alert('Failed to save voice agent. Please try again.');\n    }\n  };\n\n  const handleDeleteAgent = async (agentId: string) => {\n    if (!confirm('Are you sure you want to delete this voice agent?')) return;\n\n    try {\n      const { error } = await supabase\n        .from('voice_agents')\n        .delete()\n        .eq('id', agentId);\n\n      if (error) throw error;\n\n      setAgents(prev => prev.filter(agent => agent.id !== agentId));\n    } catch (error) {\n      console.error('Error deleting voice agent:', error);\n      alert('Failed to delete voice agent. Please try again.');\n    }\n  };\n\n  const handleToggleAgent = async (agentId: string, isActive: boolean) => {\n    try {\n      const { error } = await supabase\n        .from('voice_agents')\n        .update({ is_active: !isActive })\n        .eq('id', agentId);\n\n      if (error) throw error;\n\n      setAgents(prev => prev.map(agent => \n        agent.id === agentId ? { ...agent, is_active: !isActive } : agent\n      ));\n    } catch (error) {\n      console.error('Error toggling voice agent:', error);\n    }\n  };\n\n  const duplicateAgent = async (agent: VoiceAgent) => {\n    try {\n      const newAgentData = {\n        user_id: user?.id,\n        name: `${agent.name} (Copy)`,\n        description: agent.description,\n        config: agent.config,\n        platforms: agent.platforms\n      };\n\n      const { data, error } = await supabase\n        .from('voice_agents')\n        .insert([newAgentData])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      setAgents(prev => [data, ...prev]);\n    } catch (error) {\n      console.error('Error duplicating voice agent:', error);\n    }\n  };\n\n  const getPlatformIcon = (platform: string) => {\n    switch (platform.toLowerCase()) {\n      case 'whatsapp':\n        return <Smartphone className=\"w-4 h-4\" />;\n      case 'web':\n        return <Globe className=\"w-4 h-4\" />;\n      case 'watch':\n      case 'apple watch':\n        return <Watch className=\"w-4 h-4\" />;\n      default:\n        return <Mic className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (showBuilder) {\n    return (\n      <VoiceAgentBuilder\n        onAgentCreated={handleAgentCreated}\n        initialConfig={editingAgent?.config}\n        mode={editingAgent ? 'edit' : 'create'}\n      />\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n              ðŸŽ¤ Voice Agent Hub\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">\n              Create and manage your AI voice agents across platforms\n            </p>\n          </div>\n          \n          <button\n            onClick={() => setShowBuilder(true)}\n            className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 \n                     text-white rounded-lg font-medium transition-colors\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span>Create Agent</span>\n          </button>\n        </div>\n        \n        {/* Quick Stats */}\n        {usageStats && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-6\">\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n              <div className=\"text-blue-600 dark:text-blue-400 text-sm font-medium\">Active Agents</div>\n              <div className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">\n                {agents.filter(a => a.is_active).length}\n              </div>\n            </div>\n            \n            <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg\">\n              <div className=\"text-green-600 dark:text-green-400 text-sm font-medium\">This Week</div>\n              <div className=\"text-2xl font-bold text-green-700 dark:text-green-300\">\n                {usageStats.thisWeekUsage} uses\n              </div>\n            </div>\n            \n            <div className=\"bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg\">\n              <div className=\"text-purple-600 dark:text-purple-400 text-sm font-medium\">Voice Syntheses</div>\n              <div className=\"text-2xl font-bold text-purple-700 dark:text-purple-300\">\n                {usageStats.totalSyntheses}\n              </div>\n            </div>\n            \n            <div className=\"bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg\">\n              <div className=\"text-orange-600 dark:text-orange-400 text-sm font-medium\">Credits Used</div>\n              <div className=\"text-2xl font-bold text-orange-700 dark:text-orange-300\">\n                {usageStats.creditsUsed.toFixed(1)}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Tabs */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg\">\n        <div className=\"border-b border-gray-200 dark:border-gray-700\">\n          <nav className=\"flex space-x-8 px-6\" aria-label=\"Tabs\">\n            {[\n              { id: 'agents', label: 'Voice Agents', icon: Mic },\n              { id: 'analytics', label: 'Analytics', icon: BarChart3 },\n              { id: 'settings', label: 'Settings', icon: Settings }\n            ].map(tab => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id as any)}\n                  className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm ${\n                    activeTab === tab.id\n                      ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                      : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'\n                  }`}\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  <span>{tab.label}</span>\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {activeTab === 'agents' && (\n            <div className=\"space-y-6\">\n              {loading ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                  <p className=\"text-gray-500 dark:text-gray-400 mt-2\">Loading voice agents...</p>\n                </div>\n              ) : agents.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Mic className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                    No voice agents yet\n                  </h3>\n                  <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                    Create your first AI voice agent to get started with voice interactions.\n                  </p>\n                  <button\n                    onClick={() => setShowBuilder(true)}\n                    className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 \n                             text-white rounded-lg font-medium mx-auto\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                    <span>Create Your First Agent</span>\n                  </button>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {agents.map(agent => (\n                    <div key={agent.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                            {agent.name}\n                          </h3>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {agent.description}\n                          </p>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <div className={`w-3 h-3 rounded-full ${\n                            agent.is_active ? 'bg-green-500' : 'bg-gray-400'\n                          }`} />\n                        </div>\n                      </div>\n                      \n                      {/* Platforms */}\n                      <div className=\"flex items-center space-x-2 mb-4\">\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">Platforms:</span>\n                        {agent.platforms.map((platform, index) => (\n                          <div key={index} className=\"flex items-center space-x-1\">\n                            {getPlatformIcon(platform)}\n                            <span className=\"text-xs text-gray-600 dark:text-gray-300 capitalize\">\n                              {platform}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                      \n                      {/* Voice Profile */}\n                      <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-3 mb-4\">\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400 mb-1\">Voice Profile</div>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600 dark:text-gray-300\">Style:</span>\n                            <span className=\"font-medium capitalize\">{agent.config.voiceProfile.style}</span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600 dark:text-gray-300\">Pace:</span>\n                            <span className=\"font-medium capitalize\">{agent.config.voiceProfile.pace}</span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Actions */}\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <button\n                            onClick={() => handleToggleAgent(agent.id, agent.is_active)}\n                            className={`p-2 rounded-lg ${\n                              agent.is_active\n                                ? 'text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20'\n                                : 'text-green-600 hover:bg-green-50 dark:hover:bg-green-900/20'\n                            }`}\n                            title={agent.is_active ? 'Pause Agent' : 'Activate Agent'}\n                          >\n                            {agent.is_active ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                          </button>\n                          \n                          <button\n                            onClick={() => {\n                              setEditingAgent(agent);\n                              setShowBuilder(true);\n                            }}\n                            className=\"p-2 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg\"\n                            title=\"Edit Agent\"\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </button>\n                          \n                          <button\n                            onClick={() => duplicateAgent(agent)}\n                            className=\"p-2 text-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg\"\n                            title=\"Duplicate Agent\"\n                          >\n                            <Copy className=\"w-4 h-4\" />\n                          </button>\n                        </div>\n                        \n                        <button\n                          onClick={() => handleDeleteAgent(agent.id)}\n                          className=\"p-2 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg\"\n                          title=\"Delete Agent\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'analytics' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                Voice Usage Analytics\n              </h3>\n              \n              {usageStats ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-6\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-white mb-4\">Usage Summary</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-300\">Total Syntheses:</span>\n                        <span className=\"font-medium\">{usageStats.totalSyntheses}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-300\">Total Transcriptions:</span>\n                        <span className=\"font-medium\">{usageStats.totalTranscriptions}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-300\">This Week Usage:</span>\n                        <span className=\"font-medium\">{usageStats.thisWeekUsage}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-300\">Credits Used:</span>\n                        <span className=\"font-medium\">{usageStats.creditsUsed.toFixed(1)}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-6\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-white mb-4\">Platform Distribution</h4>\n                    <div className=\"space-y-3\">\n                      {['whatsapp', 'web', 'watch'].map(platform => {\n                        const agentCount = agents.filter(a => \n                          a.platforms.includes(platform) && a.is_active\n                        ).length;\n                        return (\n                          <div key={platform} className=\"flex justify-between items-center\">\n                            <div className=\"flex items-center space-x-2\">\n                              {getPlatformIcon(platform)}\n                              <span className=\"text-gray-600 dark:text-gray-300 capitalize\">{platform}:</span>\n                            </div>\n                            <span className=\"font-medium\">{agentCount} active</span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <BarChart3 className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    No usage data available yet. Start using your voice agents to see analytics!\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'settings' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                Voice Integration Settings\n              </h3>\n              \n              <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700 rounded-lg p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Settings className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400\" />\n                  <span className=\"font-medium text-yellow-800 dark:text-yellow-200\">\n                    Settings Coming Soon\n                  </span>\n                </div>\n                <p className=\"text-yellow-700 dark:text-yellow-300 mt-2\">\n                  Voice integration settings panel is in development. This will include:\n                </p>\n                <ul className=\"text-yellow-700 dark:text-yellow-300 mt-2 ml-4 space-y-1\">\n                  <li>â€¢ WhatsApp phone number configuration</li>\n                  <li>â€¢ Voice synthesis quality settings</li>\n                  <li>â€¢ Usage limits and billing preferences</li>\n                  <li>â€¢ Platform-specific configurations</li>\n                </ul>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}